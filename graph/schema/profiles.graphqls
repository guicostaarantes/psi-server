input CreateOwnPsychologistProfileInput {
    birthDate: Int!
    city: String!
}

input CreatePsychologistInput {
    userId: String!
    birthDate: Int!
    city: String!
}

input SetOwnPsyCharacteristicChoiceInput {
    characteristicName: String!
    values: [String!]!
}

input UpdateOwnPsychologistProfileInput {
    birthDate: Int!
    city: String!
}

input CreatePsyCharacteristicInput {
    name: String!
    many: Boolean!
    values: [String!]!
}

input UpdatePsyCharacteristicInput {
    name: String!
    many: Boolean!
    values: [String!]!
}

type PsychologistProfile {
    id: ID!
    birthDate: Int!
    city: String!
    characteristics: [PsyCharacteristicChoice!]! @goField(forceResolver: true)
}

type PsyCharacteristicChoice {
    name: String!
    many: Boolean!
    values: [String!]!
    possibleValues: [String!]!
}

type PsyCharacteristic {
    id: ID!
    name: String!
    many: Boolean!
    possibleValues: [String!]!
}

extend type Query {
    GetOwnPsychologistProfile: PsychologistProfile! @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
    GetPsyCharacteristics: [PsyCharacteristic!]! @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
}

extend type Mutation {
    CreateOwnPsychologistProfile(input: CreateOwnPsychologistProfileInput!): Boolean @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
    CreatePsyCharacteristic(input: CreatePsyCharacteristicInput!): Boolean @hasRole(role: [COORDINATOR])
    SetOwnPsyCharacteristicChoice(input: SetOwnPsyCharacteristicChoiceInput!): Boolean @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
    UpdateOwnPsychologistProfile(input: UpdateOwnPsychologistProfileInput!): Boolean @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
    UpdatePsyCharacteristic(id: ID!, input: UpdatePsyCharacteristicInput!): Boolean @hasRole(role: [COORDINATOR])
}