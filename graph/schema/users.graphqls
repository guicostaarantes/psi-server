enum Role @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.Role") {
    COORDINATOR
    PSYCHOLOGIST
    PATIENT
}

input AuthenticateUserInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.AuthenticateUserInput") {
    email: String!
    password: String!
    ipAddress: String!
}

input CreateUserWithPasswordInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.CreateUserWithPasswordInput") {
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    role: Role!
}

input CreateUserInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.CreateUserInput") {
    email: String!
    firstName: String!
    lastName: String!
}

input ResetPasswordInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.ResetPasswordInput") {
    token: String!
    password: String!
}

input UpdateOwnUserInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.UpdateUserInput") {
    firstName: String!
    lastName: String!
}

input UpdateUserInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.UpdateUserInput") {
    firstName: String!
    lastName: String!
    role: Role!
}

type User @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.User") {
    email: String!
    firstName: String!
    lastName: String!
    role: Role!
}

type Token @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.Authentication") {
    token: String!
    expiresAt: Int!
}

type Query {
    AuthenticateUser(input: AuthenticateUserInput!): Token!
    GetOwnUser: User! @hasRole(role: [COORDINATOR,PSYCHOLOGIST,PATIENT])
    GetUser(id: ID!): User! @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
    ListUsersByRole(role: Role!): [User!]! @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
}

type Mutation {
    ActivateUser(id: ID!): Boolean @hasRole(role: [COORDINATOR])
    AskResetPassword(email: String!): Boolean
    CreatePatientUser(input: CreateUserInput!): Boolean
    CreatePsychologistUser(input: CreateUserInput!): Boolean @hasRole(role: [COORDINATOR])
    CreateUserWithPassword(input: CreateUserWithPasswordInput!): Boolean @hasRole(role: [COORDINATOR])
    DeactivateUser(id: ID!): Boolean @hasRole(role: [COORDINATOR])
    ResetPassword(input: ResetPasswordInput!): Boolean
    UpdateOwnUser(input: UpdateOwnUserInput!): Boolean @hasRole(role: [COORDINATOR,PSYCHOLOGIST,PATIENT])
    UpdateUser(id: ID!, input: UpdateUserInput!): Boolean @hasRole(role: [COORDINATOR])
}

directive @hasRole(role: [Role!]!) on FIELD_DEFINITION
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION