enum Role {
    COORDINATOR
    PSYCHOLOGIST
    PATIENT
}

input AuthenticateUserInput {
    email: String!
    password: String!
    ipAddress: String!
}

input CreateUserInput {
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    role: Role!
}

input CreatePatientUserInput {
    email: String!
    firstName: String!
    lastName: String!
}

input CreatePsychologistUserInput {
    email: String!
    firstName: String!
    lastName: String!
}

input ResetPasswordInput {
    token: String!
    password: String!
}

input UpdateOwnUserInput {
    firstName: String!
    lastName: String!
}

input UpdateUserInput {
    firstName: String!
    lastName: String!
    role: Role!
}

type User {
    email: String!
    firstName: String!
    lastName: String!
    role: Role!
}

type Token {
    token: String!
    expiresAt: Int!
}

type Query {
    AuthenticateUser(input: AuthenticateUserInput!): Token!
    GetOwnUser: User! @hasRole(role: [COORDINATOR,PSYCHOLOGIST,PATIENT])
    GetUser(id: ID!): User! @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
    ListUsersByRole(role: Role!): [User!]! @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
}

type Mutation {
    ActivateUser(id: ID!): Boolean @hasRole(role: [COORDINATOR])
    AskResetPassword(email: String!): Boolean
    CreatePatientUser(input: CreatePatientUserInput!): Boolean
    CreatePsychologistUser(input: CreatePsychologistUserInput!): Boolean @hasRole(role: [COORDINATOR])
    CreateUserWithPassword(input: CreateUserInput!): Boolean @hasRole(role: [COORDINATOR])
    DeactivateUser(id: ID!): Boolean @hasRole(role: [COORDINATOR])
    ResetPassword(input: ResetPasswordInput!): Boolean
    UpdateOwnUser(input: UpdateOwnUserInput!): Boolean @hasRole(role: [COORDINATOR,PSYCHOLOGIST,PATIENT])
    UpdateUser(id: ID!, input: UpdateUserInput!): Boolean @hasRole(role: [COORDINATOR])
}

directive @hasRole(role: [Role!]!) on FIELD_DEFINITION