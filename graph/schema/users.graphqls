enum Role @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.Role") {
    JOBRUNNER
    COORDINATOR
    PSYCHOLOGIST
    PATIENT
}

input AuthenticateUserInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.AuthenticateUserInput") {
    email: String!
    password: String!
}

input CreateUserWithPasswordInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.CreateUserWithPasswordInput") {
    email: String!
    password: String!
    role: Role!
}

input CreateUserInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.CreateUserInput") {
    email: String!
}

input ResetPasswordInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.ResetPasswordInput") {
    token: String!
    password: String!
}

input UpdateUserInput @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.UpdateUserInput") {
    active: Boolean!
    role: Role!
}

type User @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.User") {
    id: ID!
    email: String!
    role: Role!
}

type Token @goModel(model: "github.com/guicostaarantes/psi-server/modules/users/models.Authentication") {
    token: String!
    expiresAt: Int!
}

type Query {
    """The authenticateUser query allows a user to exchange their email and password for an authentication token."""
    authenticateUser(input: AuthenticateUserInput!): Token!

    """The myUser query allows a user to get information about their own user."""
    myUser: User! @hasRole(role: [COORDINATOR,PSYCHOLOGIST,PATIENT])

    """The user query allows a user to get information about another user."""
    user(id: ID!): User! @hasRole(role: [COORDINATOR,PSYCHOLOGIST])

    """The usersByRole query allows a user to get users that have a specified role in the application."""
    usersByRole(role: Role!): [User!]! @hasRole(role: [COORDINATOR,PSYCHOLOGIST])
}

type Mutation {
    """The askResetPassword mutation allows a user to start a reset password procedure."""
    askResetPassword(email: String!): Boolean

    """The createPatientUser mutation allows a non-user to create a user with the PATIENT role."""
    createPatientUser(input: CreateUserInput!): Boolean

    """The createPatientUser mutation allows a user to create a user with the PSYCHOLOGIST role."""
    createPsychologistUser(input: CreateUserInput!): Boolean @hasRole(role: [COORDINATOR])

    """The createUserWithPassword mutation allows a user to create a user and set their password manually instead of sending an invitation email."""
    createUserWithPassword(input: CreateUserWithPasswordInput!): Boolean @hasRole(role: [COORDINATOR])

    """The resetPassword mutation allows a user to reset their password using a token sent to their email."""
    resetPassword(input: ResetPasswordInput!): Boolean

    """The updateUser mutation allows a user to update specific information about another user."""
    updateUser(id: ID!, input: UpdateUserInput!): Boolean @hasRole(role: [COORDINATOR])
}

directive @hasRole(role: [Role!]!) on FIELD_DEFINITION
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION